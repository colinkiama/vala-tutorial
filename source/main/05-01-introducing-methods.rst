Introducing methods
===================

You have been using methods for quite a while now. All those times where you've
created the main method and have een calling the ``print`` method to output
results from the terminal.

You will write code for this section in a different directory to the one used for the Hello World program. Follow the following instructions below to do so: 

1. Create a new directory called ``Methods`` under your ``ValaProjects`` directory.
2. Under the ``Methods``  directory you have just created, create a new file called ``main.vala``.

Methods in more detail
----------------------

As explained previously in the Hello World section, a method is a block of 
code that contain code for the program to execute when called.

.. note::

    These are technically functions because they aren't part of an instance of a class but in Vala we call functions "methods" anyway.

Now let's create a program that makes use of a method that you create and call.

First, let's start with a Hello World program

.. code-block:: vala
    :caption: main.vala

    public static void main () {
        print ("Hello World\n");
    }

Now let's create a method to move the printing logic outside of the ``main`` method.

.. code-block:: vala
    :emphasize-lines: 1-3,6
   
    public static void say_something () {
        print ("Hello World\n");
    }

    public static void main () {
        say_something ();
    }

The output of this program will still be:

.. code-block:: output

    Hello World

Updating our new method
-----------------------

One of the benefits of using methods is that we are able to change what
happens when the a method is called, without having the change the initial
method call line.

To demonstrate this, in ``say_something``, change the text that gets
output into something of your choice.

In the following example we'll be using the text "The quick brown fox jumped over the lazy dog":

.. code-block:: vala
    :emphasize-lines: 2

    public static void say_something () {
        print ("The quick brown fox jumped over the lazy dog\n");
    }

    public static void main () {
        say_something ();
    }

If you compile and run the program the program above,
it will have the following output:

.. code-block:: output

    The quick brown fox jumped over the lazy dog


Adding Method Parameters
------------------------

We can also pass in data to the method call, to influence the output generated by
a method:

Update ``say_something ()`` so that it takes in a string with the name of ``name``,
and prepend (the value of name) "says:" to the print method call. 

.. code-block:: vala
    :emphasize-lines: 2

    public static void say_something (string name) {
        print (@"$name says: The quick brown fox jumped over the lazy dog\n");
    }

    // More code below


Now you will have to pass in a name to the ``say_somthing ()`` method call in the
main method.

.. code-block:: vala
    :emphasize-lines: 6

    public static void say_something (string name) {
        print (@"$name says: The quick brown fox jumped over the lazy dog\n");
    }

    public static void main () {
        say_something ("Julie");
    }

Now if you compile and run the code above, it will output:

.. code-block:: output

    Julie says: The quick brown fox jumped over the lazy dog

Returning data from methods
---------------------------

Methods can also return data.

In ``main.vala`` add a method called ``double_number`` that takes in and integer and 
returns an integer:

.. code-block:: vala
    :emphasize-lines: 4-8

    public static void say_something (string name) {
        print (@"$name says: The quick brown fox jumped over the lazy dog\n");
    }

    public static int double_number (int number) {
        
    }

    public static void main () {
        say_something ("Julie");
    }

Now inside of the ``double_number`` method, return the result of ``number`` multiplied by ``2``:

.. code-block:: vala
    :emphasize-lines: 6

    public static void say_something (string name) {
        print (@"$name says: The quick brown fox jumped over the lazy dog\n");
    }

    public static int double_number (int number) {
        return number * 2;
    }

    public static void main () {
        say_something ("Julie");
    }

Lastly, let's test the ``double_number`` method. We'll double the number ``2``
and print out the answer, which should be ``4``:

.. code-block:: vala
    :emphasize-lines: 11

    public static void say_something (string name) {
        print (@"$name says: The quick brown fox jumped over the lazy dog\n");
    }

    public static int double_number (int number) {
        return number * 2;
    }

    public static void main () {
        say_something ("Julie");
        print ("If we double 2, we get: %d", double_number (2));
    }

Now if you compile and run the program above, we should see the following output:

.. code-block:: 

    Julie says: The quick brown fox jumped over the lazy dog
    If we double 2, we get: 4

